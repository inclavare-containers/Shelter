#!/usr/bin/env bash

. /etc/shelter.d/00_logger

SHELTER_BIN_DIR="/usr/local/libexec/shelter"

SHELTER_CONF="/etc/shelter.conf"
SHELTER_CONF_DIR="/etc/shelter.d"
SHELTER_INITRD_CONF_DIR="${SHELTER_CONF_DIR}/initrd"
SHELTER_DISK_CONF_DIR="${SHELTER_CONF_DIR}/disk"

IMAGE_ID="default"

SHELTER_DEFAULT_STAGE="${IMAGE_ID}"
SHELTER_RUNTIME_DIR="/var/run/shelter"
SHELTER_STAGE_DIR="${SHELTER_RUNTIME_DIR}/${SHELTER_DEFAULT_STAGE}"

SHELTER_DATA_DIR="/var/lib/shelter"
SHELTER_IMAGE_DIR="${SHELTER_DATA_DIR}/images/${IMAGE_ID}"
SHELTER_INITRD="${SHELTER_IMAGE_DIR}/initrd"
SHELTER_KERNEL="${SHELTER_IMAGE_DIR}/kernel"
SHELTER_DISK="${SHELTER_IMAGE_DIR}/disk"
SHELTER_PASSPHRASE="${SHELTER_IMAGE_DIR}/passphrase"
SHELTER_IMAGE_CONF="${SHELTER_IMAGE_DIR}/shelter.conf"

EXTRA_DIR="${SHELTER_IMAGE_DIR}/extra"
CONF="${SHELTER_IMAGE_DIR}/build.conf"

ESSENTIAL_BINARIES=("socat" "busybox" "kmod" "cryptsetup")
ESSENTIAL_FILES=()

# Timeout for rcS getting started to listen vsock
SHELTER_TIMEOUT=60

# Record the commands to run in guest after parsing the parameters
# with shelter run/start
COMMANDS=()

# Record the tags to mount virtiofs in guest
declare -A VIRTIOFS_MAPPING

# Function: Display help information
show_help() {
    cat <<EOF
Usage: shelter [Options] SubCommand
Available SubCommands:
    build   Build the shelter
    start   Start the shelter
    stop    Stop the shelter
    exec    exec a shell commad in shelter
    status  Query the status of shelter
    clean   Remove output image and cache
    images  show the images built by shelter

Options:
    -h, --help  Show this help message and exit
EOF
}

randomize() {
    local min=8
    local max=$((2**16 - 1))
    local r

    while true; do
        r=$(od -An -N2 -tu2 /dev/urandom | awk '{print $1}')
        if [[ $r -ge $min && $r -le $max ]]; then
            echo $r
        break
    fi

    done
}

create_passphrase() {
    debug "Creating LUKS passphrase"

    dd if=/dev/urandom of=${SHELTER_PASSPHRASE} bs=1K count=1
    chmod 600 ${SHELTER_PASSPHRASE}
}

add_dir() {
    local dir_path=$1

    if [ ! -d "${EXTRA_DIR}$dir_path" ]; then
        mkdir -p "${EXTRA_DIR}${dir_path}"
    fi
}

set_image_dir() {
    local image_id=${1-default}

    IMAGE_ID=${image_id}
    SHELTER_DEFAULT_STAGE="${IMAGE_ID}"
    SHELTER_STAGE_DIR="${SHELTER_RUNTIME_DIR}/${SHELTER_DEFAULT_STAGE}"
    SHELTER_IMAGE_DIR="${SHELTER_DATA_DIR}/images/${IMAGE_ID}"
    SHELTER_INITRD="${SHELTER_IMAGE_DIR}/initrd"
    SHELTER_KERNEL="${SHELTER_IMAGE_DIR}/kernel"
    SHELTER_DISK="${SHELTER_IMAGE_DIR}/disk"
    SHELTER_PASSPHRASE="${SHELTER_IMAGE_DIR}/passphrase"
    SHELTER_IMAGE_CONF="${SHELTER_IMAGE_DIR}/shelter.conf"

    EXTRA_DIR="${SHELTER_IMAGE_DIR}/extra"

    info "Using Image ID: $IMAGE_ID"
}

copy_file_and_dir_no_resolve_symlink() {
    local src_path=$(realpath -s $1)
    local dst_path=${2:-$src_path}

    # Check if the path exists
    if [ ! -e "$src_path" ]; then
        error "Error: $src_path is not a valid file/dir path"
        exit 1
    fi

    # Check if is a file and already copied
    if ([ -e "${EXTRA_DIR}${dst_path}" ] || [ -L "${EXTRA_DIR}${dst_path}" ]) && ! diff -q "${src_path}" "${EXTRA_DIR}${dst_path}" >/dev/null ; then
        warn "Warn: target path $dst_path already existed in $EXTRA_DIR but different, will be overwrited"
    fi

    if [[ -d "$src_path" ]]; then
        src_path="$src_path"/
        dst_path="$dst_path"/
    fi

    debug "Copying ${src_path} -> ${EXTRA_DIR}${dst_path} ..."

    add_dir "$(dirname $dst_path)"
    rsync -ap --links "${src_path}" "${EXTRA_DIR}${dst_path}"
}

# Function to copy file (dir is not handled)
copy_file_resolve_symlink() {
    local src_path=$(realpath -s $1)
    local dst_path=${2:-$src_path}

    # Check if the file exists
    if [ ! -e "$src_path" ]; then
        error "Error: $src_path is not a valid file path"
        exit 1
    fi

    # Check if the file already copied
    if [ -e "${EXTRA_DIR}${dst_path}" ] && ! diff -q "${src_path}" "${EXTRA_DIR}${dst_path}" >/dev/null ; then
        warn "Warn: target path $dst_path already existed in $EXTRA_DIR but different, will be overwrited"
    fi

    # Check if file is symbolic link
    if [ -L "$src_path" ]; then
        local target_file_path=$(realpath $1)
        copy_file_resolve_symlink $target_file_path

        debug "Copying ${src_path} -> ${EXTRA_DIR}${dst_path} ..."

        add_dir $(dirname $dst_path)
        rsync -a --links "${src_path}" "${EXTRA_DIR}${dst_path}"
        return
    fi

    # Check if file is regular
    if [ -f "$src_path" ]; then
        debug "Copying ${src_path} -> ${EXTRA_DIR}${dst_path} ..."

        add_dir $(dirname $dst_path)
        cp -a "${src_path}" "${EXTRA_DIR}${dst_path}"
        return
    fi

    warn "$src_path isn't sysmlink or regular file"
    exit 1
}

# Function to copy shared library
copy_sodeps() {
    local binary_path=$1

    # Check if the file exists
    if [ ! -f "$binary_path" ]; then
        error "Error: $binary_path is not a valid file path"
        exit 1
    fi

    # Use ldd to get dependencies
    local dependencies=$(ldd "$binary_path" 2>/dev/null)

    if [ $? -ne 0 ]; then
        warn "Warn: $binary_path is not a dynamic binary"
        return 0
    fi

    # Parse ldd output and extract and copy dependency paths
    echo "$dependencies" | while read -r line; do
        # Check if the line not contains '=>'
        if ! echo "$line" | grep -q '=>'; then
            # Extract the path, ensuring it starts with /
            local lib_path
            lib_path=$(echo "$line" | awk '{print $1}' | grep '^/')
            if [ -n "$lib_path" ]; then
                copy_file_resolve_symlink "$lib_path"
                continue
            fi
        else
            local lib_path
            lib_path=$(echo "$line" | awk -F '=>' '{print $2}' | awk '{print $1}')
            if [ -n "$lib_path" ] && [ -e "$lib_path" ]; then
                copy_file_resolve_symlink "$lib_path"
            fi
        fi
    done
}

store_stage() {
    local name="$1"
    local val="$2"

    if [ ! -d "${SHELTER_STAGE_DIR}" ]; then
        mkdir -p "${SHELTER_STAGE_DIR}"
    fi

    echo -n "${val}" > "${SHELTER_STAGE_DIR}/${name}"
}

get_stage() {
    local name="$1"

    if [ -s "${SHELTER_STAGE_DIR}/${name}" ]; then
        echo "$(cat ${SHELTER_STAGE_DIR}/${name})"
    fi

    echo ""
}

build() {
    # mkosi uses $USER to decide the ownerships of workspace
    if [ "$USER" != "root" ]; then
        warn "WARNING: Running shelter build with root privileges is generally necessary. Try `sudo su -`."
    fi

    # The default image type is initrd
    local image_type="$(get_conf image_type)"
    image_type="${image_type:=initrd}"
    image_id="${image_id:=default}"

    while [[ $# -gt 0 ]]; do
        case "$1" in
            -c|--config)
                if [[ ! -z "$2" && "$2" != -* ]]; then
                    CONF="$2"
                    if [ ! -s "$CONF" ]; then
                        error "Error: build config file \"$CONF\" doesn't exist"
                        exit 1
                    fi
                    shift
                else
                    error "Error: --config requires a value." >&2
                    return 1
                fi
                ;;
            -T|--image-type)
                if [[ "$2" != "initrd" && "$2" != "disk" ]]; then
                    error "Error: invalid -T|--image-type value." >&2
                    return 1
                fi
                image_type="$2"
                shift
                ;;
            -t|--tag)
                image_id="$2"
                shift
                ;;
            *)
                error "Unrecognized option $1"
                return 1
                ;;
        esac
        shift
    done

 
    if image_exists $image_id; then
        warn "The image \"$image_id\" already exists. It will be replaced."
    fi

    set_image_dir ${image_id}

    debug "Gather files to be copied and copy into $EXTRA_DIR"
    rm -rf "$EXTRA_DIR"

    if [ ! -d "$EXTRA_DIR" ]; then
        mkdir -p "$EXTRA_DIR"
    fi

    local binaries=()
    local files=()
    local src_dir="$(pwd)"

    if [ -s "$CONF" ]; then
        info "Using $CONF as config file"

        # Read options from the configuration file
        while IFS= read -r line || [ -n "$line" ]; do
            # Trim leading and trailing whitespaces
            line=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

            # Check line content and extract values
            if [[ $line == binary=* ]]; then
                # Remove binary= and parentheses
                line=$(echo "$line" | sed 's/^binary=//;s/[()]//g')
                # Split into an array and add to binaries array
                IFS=' ' read -r -a binary_array <<< "$line"
                binaries+=("${binary_array[@]}")
            elif [[ $line == file=* ]]; then
                # Remove file= and parentheses
                line=$(echo "$line" | sed 's/^file=//;s/[()]//g')
                # Split into an array and add to files array
                IFS=' ' read -r -a file_array <<< "$line"
                files+=("${file_array[@]}")
            fi
        done < "$CONF"

        # Assume any relative path in the source is always based on the
        # directory where the config file resides.
        src_dir="$(dirname $CONF)"
    fi

    local src=""
    local dst=""

    # Add the essential binaries
    for i in "${ESSENTIAL_BINARIES[@]}"; do
        i="$(which $i)"
        debug "Copying essential binary $i ..."

        copy_sodeps "$i"
        copy_file_resolve_symlink "$i" "$i"
    done

    local kernel_version="$(uname -r)"

    if [ "$image_type" = "disk" ]; then
        debug "Building initrd image: ${SHELTER_INITRD}"

        $(SHELTER_BIN_DIR)/mkosi/bin/mkosi -f --debug -C "${SHELTER_INITRD_CONF_DIR}" \
          --postinst-script="${SHELTER_INITRD_CONF_DIR}/mkosi.postinst" \
          --output-dir="${SHELTER_IMAGE_DIR}}" --output="$(basename ${SHELTER_INITRD})" \
          --extra-tree="${EXTRA_DIR}:/extra" \
          --extra-tree="/usr/lib/modules/${kernel_version}:/usr/lib/modules/${kernel_version}" \
          build

        if [ $? -ne 0 ]; then
            error "Error: failed to build initrd with mkosi"
            exit 1
        fi
    fi

    # Parse the mapping between the source and destinaion
    for i in "${binaries[@]}"; do
        if [[ "$i" == *:* ]]; then
            IFS=':' read -r src dst <<< "$i"
        else
            src="$i"
            dst="$i"
        fi

        # Prepend the prefix
        if [[ ! $src =~ ^/ ]]; then
            src="$src_dir/$src"
        fi

        src="$(realpath $src)"

        copy_sodeps $src
        copy_file_resolve_symlink "$src" "$dst"
    done

    for i in "${files[@]}"; do
        if [[ "$i" == *:* ]]; then
            IFS=':' read -r src dst <<< "$i"
        else
            src="$i"
            dst="$i"
        fi

        if [[ ! $src =~ ^/ ]]; then
            src="$src_dir/$src"
        fi

        src="$(realpath $src)"

        copy_file_and_dir_no_resolve_symlink "$src" "$dst"
    done

    # Add the essential files
    for i in "${ESSENTIAL_FILES[@]}"; do
        copy_file_and_dir_no_resolve_symlink "$i"
    done

    if [ "$image_type" = "initrd" ]; then
        debug "Building initrd image: ${SHELTER_INITRD}"

        ${SHELTER_BIN_DIR}/mkosi/bin/mkosi -f --debug -C "${SHELTER_INITRD_CONF_DIR}" \
          --build-script="${SHELTER_INITRD_CONF_DIR}/mkosi.build" \
          --finalize-script="${SHELTER_INITRD_CONF_DIR}/mkosi.finalize" \
          --postinst-script="${SHELTER_INITRD_CONF_DIR}/mkosi.postinst" \
          --output-dir="${SHELTER_IMAGE_DIR}" --output="$(basename ${SHELTER_INITRD})" \
          --extra-tree="${EXTRA_DIR}:/extra" \
          --extra-tree="/usr/lib/modules/${kernel_version}:/usr/lib/modules/${kernel_version}" \
          build

        if [ $? -ne 0 ]; then
            error "Error: failed to build initrd image with mkosi"
            exit 1
        fi
    elif [ "$image_type" = "disk" ]; then
        create_passphrase

        debug "Building Disk image: ${SHELTER_DISK}"

        ${SHELTER_BIN_DIR}/mkosi/bin/mkosi -f --debug -C "${SHELTER_DISK_CONF_DIR}" \
          --build-script="${SHELTER_DISK_CONF_DIR}/mkosi.build" \
          --finalize-script="${SHELTER_DISK_CONF_DIR}/mkosi.finalize" \
          --postinst-script="${SHELTER_DISK_CONF_DIR}/mkosi.postinst" \
          --output-dir="${SHELTER_IMAGE_DIR}" --output="$(basename ${SHELTER_DISK})" \
          --extra-tree="${EXTRA_DIR}:/extra" \
          --extra-tree="/usr/lib/modules/${kernel_version}:/usr/lib/modules/${kernel_version}" \
          --passphrase="${SHELTERPASS}" \
          --repart-dir="${SHELTER_DISK_CONF_DIR}/mkosi.repart" \
          build

        if [ $? -ne 0 ]; then
            error "Error: failed to build disk image with mkosi"
            exit 1
        fi
    fi

    store_image_info "image_type" "${image_type}"

    debug "Copying kernel: ${SHELTER_KERNEL}"

    if [ -s "/boot/vmlinuz-${kernel_version}" ]; then
        cp -f "/boot/vmlinuz-${kernel_version}" "${SHELTER_KERNEL}"
        info "Succeed to build the image \"$IMAGE_ID\""
        return 0
    else
        # Arch Linux doesn't have a versioned kernel image file
        for kernel_image in /boot/vmlinu*; do
            image_version=$(file -bL "$kernel_image" | grep -o 'version [^ ]*' | cut -d ' ' -f 2)
            if [[ "$image_version" == "$kernel_version" ]]; then
                cp -f $kernel_image ./image.vmlinuz
                info "Build successful, image id: $IMAGE_ID"
                return 0
            fi
        done
    fi

    error "Error: can't find the currently active kernel from /boot/"
    exit 1
}

store_image_info() {
    key="$1"
    value="$2"

    if [ ! -s ${SHELTER_IMAGE_DIR}/image_info.toml ];then 
        touch ${SHELTER_IMAGE_DIR}/image_info.toml
    fi 
    toml set  ${key} ${value} --toml-path=${SHELTER_IMAGE_DIR}/image_info.toml
}

get_image_info() {
    key="$1"
    toml get --toml-path ${SHELTER_IMAGE_DIR}/image_info.toml "${key}"
}

get_conf() {
    local name="$1"

    toml get --toml-path "${SHELTER_CONF}" "${name}"
}

get_image_conf() {
    local name="$1"

    toml get --toml-path "${SHELTER_IMAGE_CONF}" "${name}"
}

config_qemu() {
    local bin="$1"
    local mem="$2"
    local kern_cmd="$3"
    local cid="$4"
    local extra_opts="$5"
    local virtiofs_nr=$6
    local cpus="$7"
    local firmware="$8"

    if [ x"${bin}" = x"" ]; then
        bin="qemu-system-x86_64"
    fi

    if [ x"${mem}" = x"" ]; then
        mem="4G"
    fi

    if [ x"${cpus}" = x"" ]; then
        cpus="2"
    fi

    kern_cmd="${kern_cmd} console=ttyS0"

    local opts="$(cat <<EOF
-accel kvm -m ${mem} -nographic -cpu host
-kernel '${SHELTER_KERNEL}' -initrd '${SHELTER_INITRD}'
-append '${kern_cmd}'
-device virtio-rng-pci
-device vhost-vsock-pci,guest-cid=${cid}
-smp ${cpus} 
EOF
)"
    if [ ! -z ${firmware} ];then
       opts+=" -drive if=pflash,format=raw,unit=0,file=${firmware},readonly=on"
    fi

    for (( i=0; i<${virtiofs_nr}; i++ )); do
        opts+=" -chardev socket,id=virtiofs-sock-${i},path=${SHELTER_STAGE_DIR}/virtiofs-${i}.sock \
          -device vhost-user-fs-pci,queue-size=1024,chardev=virtiofs-sock-${i},tag=virtiofs-${i}"
    done

    if [ ${virtiofs_nr} -gt 0 ]; then
        opts+=" -object memory-backend-file,id=mem,size=${mem},mem-path=/dev/shm,share=on -numa node,memdev=mem"
    fi

    local image_type="$(get_image_info image_type)"
    if [ x"$image_type" = x"disk" ]; then
        opts+=" -drive file='${SHELTER_DISK}',format=raw,if=virtio"
    fi

    echo -n "${bin} ${opts} ${extra_opts}"
}

start() {
    if [ x"$(get_image_info image_type)" = x"" ]; then
        error "The file ${SHELTER_STAGE_DIR}/image_type is missing. You may need to run 'shelter build' first."
        exit 1
    fi

    if [ ! -s "${SHELTER_KERNEL}" ]; then
        error "The file ${SHELTSHELTER_KERNELER_INITRD} is missing. You may need to run 'shelter build' first."
        exit 1
    fi

    if [ ! -s "${SHELTER_INITRD}" ]; then
        error "The file ${SHELTER_INITRD} is missing. You may need to run 'shelter build' first."
        exit 1
    fi

    local opts=()
    local volumes=()
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -v|--volume)
                if [ -z "$2" ]; then
                    error "Error: -v/--volume requires a value." >&2
                    exit 1
                fi
                volumes+=("$2")
                shift
                ;;
            *)
                opts+=("$1")
                ;;
        esac
        shift
    done

    COMMANDS=${opts[@]}

    local virtiofs_nr=0
    for i in "${volumes[@]}"; do
        local src
        local dst

        if [[ "$i" == *:* ]]; then
            IFS=':' read -r src dst <<< "$i"
        else
            src="$i"
            dst="$i"
        fi

        if [ ! -d "${src}" ]; then
            error "The host sharing directory ${src} doesn't exist."
            exit 1
        fi

        debug "host-guest sharing between $src and $dst"

        ${SHELTER_BIN_DIR}/virtiofsd \
          --socket-path="${SHELTER_STAGE_DIR}/virtiofs-${virtiofs_nr}.sock" \
          --shared-dir "${src}" &
        store_stage "virtiofs-${virtiofs_nr}.pid" "$!"

        VIRTIOFS_MAPPING["${virtiofs_nr}"]="${dst}"
        virtiofs_nr=$((virtiofs_nr + 1))
    done

    local max_user_ns="$(sysctl --binary --quiet user.max_user_namespaces)"

    # Work around the default zero max_user_namespaces value on apasa
    if [ "${max_user_ns}" = "0" ]; then
        warn "Set user.max_user_namespaces to be 766996 forcibly."
        sysctl --write user.max_user_namespaces=766996
    fi

    local cid=$(randomize)
    store_stage "cid" "${cid}"

    local vmm="$(get_conf vmm)"
    local cmd=""
    if [ x"${vmm}" = x"qemu" ]; then
        local bin="$(get_conf ${vmm}.bin)"
        local mem="$(get_conf ${vmm}.mem)"
        local cpus="$(get_conf ${vmm}.cpus)"
        local kern_cmdline="$(get_conf ${vmm}.kern_cmdline)"
        local firmware="$(get_conf ${vmm}.firmware)"
        local opts="$(get_conf ${vmm}.opts)"

        #if image.conf exist, repalase the parameters
        if [ -s ${SHELTER_IMAGE_CONF} ]; then 
           mem="$(get_image_conf mem)"
           cpus="$(get_image_conf cpus)"
        fi

        cmd="$(config_qemu "${bin}" "${mem}" "${kern_cmdline}" "${cid}" "${opts}" "${virtiofs_nr}" "${cpus}" "${firmware}")"
    fi

    debug "qemu command: $cmd"
    eval cmd=("$cmd")

    unit_name="shelter_${IMAGE_ID}"
    systemd-run --user --description=Shelter --unit="$unit_name" -p StandardInput=null -G "${cmd[@]}"
    if [ $? -ne 0 ]; then
        error "Failed to run systemd-run to launch qemu."
        exit 1
    fi

    debug "The guest is started at CID ${cid}"

    if [ x"$(get_image_info image_type)" != x"disk" ]; then
        return 0
    fi

    local wait_seconds=${SHELTER_TIMEOUT}
    debug "Now waiting ${wait_seconds} seconds for the guest to open crypt disk ..."
    local is_ready=0

    for ((i=${wait_seconds}; i>0; i--)); do
        if ! is-active; then
            error "Failed to run shelter guest"
            return 1
        fi

        if socat -u file:${SHELTER_PASSPHRASE} vsock-connect:${cid}:4321 1>&- 2>&-; then
            # The guest is ready
            is_ready=1
            break
        fi

        sleep 1
    done

    if [ $is_ready -ne 1 ]; then
        error "Failed to open shelter guest disk"
        stop
        exit 1
    fi
}

is-active() {
    systemctl --user -q is-active shelter_${IMAGE_ID}.service
}

run() {
    start "$@"

    debug "The guest is booting"

    local wait_seconds=${SHELTER_TIMEOUT}
    debug "Now waiting ${wait_seconds} seconds for the guest to launch ..."

    local cid="$(get_stage cid)"
    local is_ready=0

    for ((i=${wait_seconds}; i>0; i--))
    do
        if ! is-active; then
            error "Failed to run shelter service"
            return 1
        fi

        # Check whether the guest gets ready
        if socat /dev/null vsock-connect:${cid}:4321 1>&- 2>&-; then
            is_ready=1
            break
        fi

        sleep 1
    done

    if [ $is_ready -ne 1 ]; then
        error "Failed to launch guest"
        stop
        return 1
    fi

    if [[ $1 == "--" ]]; then
        shift
    fi

    debug "Run commands in guest: '${COMMANDS}'"
    exec ${COMMANDS}

    stop
}

status() {
    if is-active; then
        systemctl --user status shelter_${IMAGE_ID}.service
        return 0
    fi

    echo "Shelter isn't running"
}

stop() {
    if ! is-active; then
        exit 0;
    fi

    local cid="$(get_stage cid)"

    debug "Send poweroff event to the guest"
    echo "/usr/bin/poweroff" | socat - vsock-connect:${cid}:4321

    local wait_seconds=${SHELTER_TIMEOUT}
    debug "Now waiting ${wait_seconds} seconds for the guest to exit ..."

    for ((i=${wait_seconds}; i>0; i--))
    do
        if ! is-active; then
            debug "Shelter has been smoothly stopped"
            return 0
        fi

        sleep 1
    done

    error "Shelter has been forcibly shut down"
}

exec() {
    if [ "$1" = "--" ]; then
        shift
    fi

    if [ ${#VIRTIOFS_MAPPING[@]} -ne 0 ]; then
        # Save and clean parameters
        local opts="$@"
        set --

        for f in "${SHELTER_STAGE_DIR}"/virtiofs-*.sock; do
            f="$(basename $f)"
            f="${f##*-}"
            f="${f%.sock}"

            set -- "$@" \
              "[ ! -d ${VIRTIOFS_MAPPING[${f}]} ] && \
                   mkdir -p ${VIRTIOFS_MAPPING[${f}]}; \
                 mount -t virtiofs virtiofs-${f} ${VIRTIOFS_MAPPING[${f}]}; "
        done

        debug "Pre-run the commands \"$@\""
        set -- "$@" "${opts}"
    fi

    local cid="$(get_stage cid)"
    echo "$@" | socat -t 3600 - vsock-connect:${cid}:4321
}

clean() {
    ${SHELTER_BIN_DIR}/mkosi/bin/mkosi clean
    rm -rf "${EXTRA_DIR}"
}

show_images() {
    printf "%-12s | %-10s | %-12s | %-12s | %-10s | %-20s \n" "ID" "IMAGE_TYPE" "IMAGE_HASH" "KERNEL_HASH" "IMAGE_SIZE" "CREATED"

    for id in `ls -t ${SHELTER_DATA_DIR}/images`; do
       image_dir=${SHELTER_DATA_DIR}/images/${id}
       if [ -s ${image_dir}/image_type ];then
            image_type=`cat ${image_dir}/image_type`
       fi

       if [ -s ${image_dir}/initrd ];then
            initrd_hash=`sha1sum ${image_dir}/initrd |awk '{print substr($1, 1, 9)}'`
            initrd_size=`ls -l -h $(readlink -f ${image_dir}/initrd)|awk '{print $5}'`
            create_time=`ls -l --time-style=+"%m-%d+%H:%M:%S" ${image_dir}/initrd | awk '{print $6}'`
       fi

       if [ -s ${image_dir}/kernel ];then
            kernel_hash=`sha1sum ${image_dir}/kernel | awk '{print substr($1, 1, 9)}'`
       fi 

       if [ ! -z "$image_type" ] && [ ! -s ${image_dir}/initrd ] && [ ! -s ${image_dir}/kernel ];then
            debug "Bad Image, miss some file"
       else
            printf "%-12s | %-10s | %-12s | %-12s | %-10s | %-20s \n" ${id} ${image_type} ${initrd_hash} ${kernel_hash} ${initrd_size} ${create_time}
       fi
    done
}

image_exists() {
    local image_id=$1
    if [ -s ${SHELTER_DATA_DIR}/images/${image_id}/initrd ];then 
        return 0
    else 
        return 1 
    fi
}

prepre_image() {
    local image_id="$1"

    if [[ "${image_id}" == -* ]]; then
        info "Using the default image \"${IMAGE_ID}\""
        set_image_dir
        return 1
    fi

    if ! image_exists "${image_id}"; then
         warn "Image id \"${image_id}\" doesn't exist, using the default image \"${IMAGE_ID}\""
         set_image_dir
         return 1
    fi

    set_image_dir "${image_id}"
    return 0
}

main() {
    # Check if a subcommand or help option is provided
    if [ $# -lt 1 ]; then
        show_help
        exit 1
    fi

    # Check for --help or -h options
    for arg in "$@"; do
        case $arg in
            -h|--help)
                show_help
                exit 0
                ;;
            --)
                break
                ;;
        esac
    done

    [ -z "${XDG_RUNTIME_DIR}" ] && export XDG_RUNTIME_DIR="/run/user/$(id -u)"
    [ -z "${DBUS_SESSION_BUS_ADDRESS}" ] && export DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus"

    # Get subcommand
    subcommand=$1
    shift

    case $subcommand in
        start)
            if prepre_image "$1"; then
                shift
            fi 
            start "$@"
            ;;
        stop)
            if prepre_image "$1"; then
                shift
            fi 
            stop
            ;;
        build)
            build "$@"
            ;;
        status)
            if prepre_image "$1"; then
                shift
            fi 
            status
            ;;
        run)
            if prepre_image "$1"; then
                shift
            fi 
            run "$@"
            ;;
        exec)
            if prepre_image "$1"; then
                shift
            fi 
            exec "$@"
            ;;
        clean)
            if prepre_image "$1"; then
                shift
            fi 
            clean
            ;;
        images)
            show_images
            ;;
        help)
            show_help
            ;;
        *)
            echo "Unrecognized subcommand: $subcommand"
            exit 1
            ;;
    esac
}

trap_handler() {
    trap - SIGINT SIGTERM EXIT ERR

    local line_no="$1"
    local err=$2

    debug "Exiting ..."

    if [ $err -ne 0 ] && [ "$line_no" != "1" ]; then
        error "Error occurred on line $line_no, exit code: $err"
    fi

        debug "Cleaning up ..."

        systemctl --user stop shelter_${IMAGE_ID}.service 2>/dev/null
        for f in "${SHELTER_STAGE_DIR}"/virtiofs-*.pid; do
            [ ! -f "$f" ] && continue;

            kill "$(cat ${f})" 2>/dev/null
            rm -f "${f}"
            rm -f "${f/.pid/.sock}"
        done

        rm -f "${SHELTER_STAGE_DIR}/cid"

    exit $err
}

trap 'trap_handler $LINENO $?' SIGINT SIGTERM EXIT ERR

main "$@"
